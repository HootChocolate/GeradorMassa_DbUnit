package seuBarrigaPontoCom_estrategia4;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import java.sql.Connection;
import java.sql.SQLException;

import org.junit.Before;
import org.junit.Test;

import br.ce.wcaquino.dao.utils.ConnectionFactory;
import br.ce.wcaquino.entidades.Conta;
import br.ce.wcaquino.service.ContaService;

/**
 * Teste utilizando a estratégia de gerenciamento de massa de dados #4
 * É gerado uma massa no banco de dados para cada teste, depois de limpo o banco
 * @author jay
 */
public class TestContaService {

	private ContaService contaService = new ContaService();
	
	/**
	 * Antes de cada teste limpa os dados do banco.
	 * Deve-se respeitar a ordem de remoção dos dados 
	 * 
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	@Before
	public void setUp() throws ClassNotFoundException, SQLException {
		Connection conexaoJBDC= ConnectionFactory.getConnection();
		conexaoJBDC.prepareStatement("DELETE FROM transacoes").executeUpdate();
		conexaoJBDC.prepareStatement("DELETE FROM contas").executeUpdate();
		conexaoJBDC.prepareStatement("DELETE FROM usuarios").executeUpdate();
		
		ConnectionFactory.closeConnection();
	}
	
	/**
	 * Após limpar o banco de dados, testa a inserção de uma conta no banco
	 * @throws Exception
	 */
	@Test
	public void testInserirConta() throws Exception {
		
		String nomeConta = "Inserir Conta";
		
		inserirUsuarioEConta(nomeConta);
		
		Conta consultaConta = contaService.findByName(nomeConta);
		
		assertEquals("[ERRO]Houver algum erro no teste de inserção de dados, no teste de serviço da estratégia 4"
				, nomeConta, consultaConta.getNome());
	}

	/**
	 * Após limpar o banco de dados, testa a consulta de uma conta no banco
	 * @throws Exception
	 */
	@Test
	public void testConsultaConta() throws Exception {
				
		String nomeConta= "Test Consultar";
		
		inserirUsuarioEConta(nomeConta);
		
		Conta contaConsultada = contaService.findByName(nomeConta);		
		
		assertEquals("[ERRO]Houve algum erro ao consultar uma conta, no teste de serviço da estratégia 4"
				, nomeConta, contaConsultada.getNome());
	}
	
	/**
	 * Após limpar o banco de dados, testa a edição de uma conta no banco
	 * @throws Exception
	 */
	@Test
	public void testEditarConta() throws Exception {
				
		String nomeConta = "Test Editar";
		String nomeContaEditada = "Test Editar OK";
		
		inserirUsuarioEConta(nomeConta);
		
		Connection conexaoJDBC = ConnectionFactory.getConnection();
		
		conexaoJDBC.prepareStatement(
				"UPDATE contas "
				+ "SET nome = '" + nomeContaEditada 
				+ "' WHERE id = 1").execute();
		
		ConnectionFactory.closeConnection();
		
		Conta contaEditada = contaService.findByName(nomeContaEditada);
		
		assertEquals("[ERRO]Houve erro ao tentar editar uma conta no banco, no teste de serviço da estratégia 4"
				, nomeContaEditada, contaEditada.getNome());
	}
	
	/**
	 * Após limpar o banco de dados, insere uma conta e um usuário no banco
	 * e testa a remoção da conta
	 * @throws Exception
	 */
	@Test
	public void testRemoverConta() throws Exception {
				
		String nomeConta = "Test Remover";
		
		inserirUsuarioEConta(nomeConta);
		
		Connection conexaoJDBC = ConnectionFactory.getConnection();
		
		conexaoJDBC.prepareStatement("DELETE FROM contas WHERE nome = '" + nomeConta + "'").execute();
		
		ConnectionFactory.closeConnection();
		
		Conta contaRemovida = contaService.findByName(nomeConta);
		
		assertNull("[ERRO]Houve algum erro ao tentar remover uma conta, no teste de serviço utilizando a estratégia 4"
				, contaRemovida);
	}
	
	/**
	 * Insere um usuário e uma conta no banco.
	 * @param nomeConta
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	private void inserirUsuarioEConta(String nomeConta) throws ClassNotFoundException, SQLException {
		
		Connection conexaoJDBC = ConnectionFactory.getConnection();
		
		conexaoJDBC.prepareStatement(
				"INSERT INTO usuarios "
				+ "(id, nome, email, senha) "
				+ "VALUES (1, 'Usuario de Teste', 'teste@email.com', 'passwd')").execute();
		
		conexaoJDBC.prepareStatement(
				"INSERT INTO contas "
				+ "(id, nome, usuario_id) "
				+ "VALUES (1,  '" + nomeConta + "', 1)").execute();		
		
		ConnectionFactory.closeConnection();
	}
}

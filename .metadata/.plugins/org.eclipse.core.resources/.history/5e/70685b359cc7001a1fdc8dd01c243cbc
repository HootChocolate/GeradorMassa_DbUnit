package seuBarrigaPontoCom_estrategia4;

import static org.junit.Assert.assertEquals;

import java.sql.Connection;
import java.sql.SQLException;

import org.junit.Before;
import org.junit.Test;

import br.ce.wcaquino.dao.utils.ConnectionFactory;
import br.ce.wcaquino.entidades.Conta;
import br.ce.wcaquino.service.ContaService;

/**
 * Teste utilizando a estratégia de gerenciamento de massa de dados #4
 * É gerado uma massa no banco de dados para cada teste, depois de limpo o banco
 * @author jay
 */
public class TestContaService {

	private ContaService contaService = new ContaService();
	
	/**
	 * Antes de cada teste limpa os dados do banco, 
	 * garantindo a ordem hieranquica de remoção dos dados 
	 * 
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	@Before
	public void setUp() throws ClassNotFoundException, SQLException {
		Connection conexaoJBDC= ConnectionFactory.getConnection();
		conexaoJBDC.prepareStatement("DELETE FROM transacoes").executeUpdate();
		conexaoJBDC.prepareStatement("DELETE FROM contas").executeUpdate();
		conexaoJBDC.prepareStatement("DELETE FROM usuarios").executeUpdate();
		
		ConnectionFactory.closeConnection();
	}
	
//	@Test
	public void testInserirConta() throws Exception {
		Connection conexaoJBDC= ConnectionFactory.getConnection();
		
		String nomeConta= "test_inserir";
		
		conexaoJBDC.prepareStatement(
				"INSERT INTO usuarios "
				+ "(id, nome, email, senha) "
				+ "VALUES (1, 'Usuario de Teste', 'teste@email.com', 'passwd')").execute();
		
		conexaoJBDC.prepareStatement(
				"INSERT INTO contas "
				+ "(id, nome, usuario_id) "
				+ "VALUES (1,  '" + nomeConta + "', 1)").execute();

		ConnectionFactory.closeConnection();
		
		Conta contaConsultada = contaService.findByName(nomeConta);
		
		assertEquals("[ERRO]Houver algum erro no teste de inserção de dados, no teste de serviço da estratégia 4"
				, nomeConta, contaConsultada.getNome());
	}
	
	@Test
	public void testConsultaConta() throws Exception {
		Connection conexaoJBDC= ConnectionFactory.getConnection();
		
		String nomeConta= "Test Consultar";
		
		conexaoJBDC.prepareStatement(
				"INSERT INTO usuarios "
				+ "(id, nome, email, senha) "
				+ "VALUES (1, 'Usuario de Teste', 'teste@email.com', 'passwd')").execute();
		
		conexaoJBDC.prepareStatement(
				"INSERT INTO contas "
				+ "(id, nome, usuario_id) "
				+ "VALUES (1,  '" + nomeConta + "', 1)").execute();
		
		ConnectionFactory.closeConnection();
		
		Conta contaConsultada = contaService.findByName(nomeConta);		
		
		assertEquals("[ERRO]Houve algum erro ao consultar uma conta, no teste de serviço da estratégia 4"
				, nomeConta, contaConsultada.getNome());
	}
	
//	@Test
	public void testEditarConta() throws Exception {
		Connection conexaoJDBC = ConnectionFactory.getConnection();
		
		String nomeConta = "test_editar";
		String nomeContaEditada = "test_editar_OK";
		
		conexaoJDBC.prepareStatement(
				"INSERT INTO usuarios "
				+ "(id, nome, email, senha) "
				+ "VALUES (1, 'Usuario de Teste', 'teste@email.com', 'passwd')").execute();
		
		conexaoJDBC.prepareStatement(
				"INSERT INTO contas "
				+ "(id, nome, usuario_id) "
				+ "VALUES (1,  '" + nomeConta + "', 1)").execute();
		
		conexaoJDBC.prepareStatement(
				"UPDATE contas "
				+ "SET nome = '" + nomeContaEditada 
				+ "' WHERE id = 1").execute();
		
		ConnectionFactory.closeConnection();
		
		Conta contaEditada = contaService.findByName(nomeContaEditada);
		
		assertEquals("[ERRO]Houve erro ao tentar editar uma conta no banco, no teste de serviço da estratégia 4"
				, nomeContaEditada, contaEditada.getNome());
	}

}
